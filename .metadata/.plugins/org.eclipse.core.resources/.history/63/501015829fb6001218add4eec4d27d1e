package com.undeadstudio.returners.controller;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.undeadstudio.returners.Returners;
import com.undeadstudio.returners.model.Bullet;
import com.undeadstudio.returners.model.Player;
import com.undeadstudio.returners.model.World;
import com.undeadstudio.returners.screens.MainMenu;

public class InputHandler implements InputProcessor {

	World world;
	Player player;
	Vector3 touch = new Vector3();
	Vector2 vec2Touch = new Vector2();
	protected float counter = 8;
	int i = 0;

	public InputHandler(World world) {
		this.world = world;
	}

	@Override
	public boolean keyDown(int keycode) {

		player = world.getPlayer();

		switch (keycode) {
		case Keys.W:
		case Keys.UP:
			// player.getVelocity().y = player.getSpeed();
			break;

		case Keys.S:
		case Keys.DOWN:
			// player.getVelocity().y = -player.getSpeed();
			break;

		case Keys.D:
		case Keys.RIGHT:
			// player.getVelocity().x = player.getSpeed();
			break;

		case Keys.A:
		case Keys.LEFT:
			// player.getVelocity().x = -player.getSpeed();
			break;

		case Keys.ESCAPE:

			// SettingsScreen.GAME_PAUSED = !SettingsScreen.GAME_PAUSED;

			world.getGame().setScreen(new MainMenu(world.getGame()));
		default:
			break;

		}

		return true;
	}

	@Override
	public boolean keyUp(int keycode) {

		player = world.getPlayer();

		switch (keycode) {
		case Keys.W:
		case Keys.UP:
			player.getVelocity().y = 0;
			break;

		case Keys.S:
		case Keys.DOWN:
			player.getVelocity().y = 0;
			break;

		case Keys.D:
		case Keys.RIGHT:
			player.getVelocity().x = 0;
			break;

		case Keys.A:
		case Keys.LEFT:
			player.getVelocity().x = 0;
			break;
			
		case Keys.BACK:
			world.getGame().setScreen(new MainMenu(world.getGame()));
			
		default:
			break;
		}

		return true;
	}

	@Override
	public boolean keyTyped(char character) {
		return false;
	}

	@Override
	public boolean touchDown(int x, int y, int pointer, int button) {
		touch.set(x, y, 0);
		world.getRenderer().getCamera().unproject(touch);
		vec2Touch.set(touch.x, touch.y);
		player = world.getPlayer();

		player.setRotation(new Vector2(vec2Touch.sub(player.getPosition()).nor()));
		
		
		
		world.addBullet(new Bullet(Bullet.getSpeed(), 0, .1f, 8 / 20f, new Vector2(
				player.getPosition().x + player.getWidth() / 2, player
						.getPosition().y + player.getHeight() / 2),
				new Vector2(vec2Touch.sub(player.getPosition()).nor()), Bullet.TYPE.FRIEND));

		if (Returners.DEBUG) {
			Gdx.app.log(Returners.LOG, "Bow rotation: " + player.getRotation());
			Gdx.app.log(Returners.LOG, "Bullet created!");
		}

		return true;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		return true;
	}

	@Override
	public boolean touchDragged(int x, int y, int pointer) {

		if (i  >= counter) {
			i = 0;
			touch.set(x, y, 0);
			world.getRenderer().getCamera().unproject(touch);
			vec2Touch.set(touch.x, touch.y);
			player = world.getPlayer();

			world.addBullet(new Bullet(Bullet.getSpeed(), 0, .1f, 8 / 20f,
					new Vector2(player.getPosition().x + player.getWidth() / 2,
							player.getPosition().y + player.getHeight() / 2),
					new Vector2(vec2Touch.sub(player.getPosition()).nor()), Bullet.TYPE.FRIEND));

			// AngryAudio.shoot();


			if (Returners.DEBUG) {
				Gdx.app.log(Returners.LOG, "Bullet created!");
			}
		} else {
			i++;
		}

		return true;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		return false;
	}
	
	

}
